{"ast":null,"code":"var _jsxFileName = \"/Users/brettdickenson1/Desktop/WORK/drivvn-tech-task/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport CardDisplay from \"./components/CardDisplay\";\nimport Button from \"./components/Button\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [deckId, setDeckId] = useState(null);\n  const [currentCard, setCurrentCard] = useState(null);\n  const [previousCard, setPreviousCard] = useState(null);\n  const [valueMatches, setValueMatches] = useState(0);\n  const [valueMatchesText, setValueMatchesText] = useState(\"\");\n  const [suitMatches, setSuitMatches] = useState(0);\n  const [suitMatchesText, setSuitMatchesText] = useState(\"\");\n  const [remainingCards, setRemainingCards] = useState(52);\n  const [message, setMessage] = useState(\"\");\n\n  // Fetches a new deck of cards from the API on component mount\n  useEffect(() => {\n    fetchNewDeck();\n  }, []);\n\n  // Function to fetch a new deck of cards\n  const fetchNewDeck = async () => {\n    const response = await fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\");\n    const data = await response.json();\n    setDeckId(data.deck_id);\n  };\n\n  // Function to draw a card from the deck\n  const drawCard = async () => {\n    const response = await fetch(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`);\n    const data = await response.json();\n    const drawnCard = data.cards[0]; // Get the drawn card from the response data\n\n    // Update the previous card if there's a current card\n    if (currentCard) {\n      setPreviousCard(currentCard);\n    }\n\n    // Update the current card and remaining cards count\n    setCurrentCard(drawnCard);\n    setRemainingCards(data.remaining);\n\n    // Set current card to null if there are no remaining cards\n    if (data.remaining === 0) {\n      setCurrentCard(null);\n    }\n  };\n\n  // useEffect to check for card matching (suit or value)\n  useEffect(() => {\n    if ((currentCard === null || currentCard === void 0 ? void 0 : currentCard.suit) === (previousCard === null || previousCard === void 0 ? void 0 : previousCard.suit) && currentCard) {\n      setMessage(\"SNAP SUIT!\");\n      setSuitMatches(prevValue => prevValue + 1);\n    } else if ((currentCard === null || currentCard === void 0 ? void 0 : currentCard.value) === (previousCard === null || previousCard === void 0 ? void 0 : previousCard.value) && currentCard) {\n      setMessage(\"SNAP VALUE!\");\n      setValueMatches(prevValue => prevValue + 1);\n    } else {\n      setMessage(\"\");\n    }\n  }, [currentCard, previousCard === null || previousCard === void 0 ? void 0 : previousCard.suit, previousCard === null || previousCard === void 0 ? void 0 : previousCard.value]);\n\n  // useEffect to update match statistics when remaining cards reach 0\n  useEffect(() => {\n    if (remainingCards === 0) {\n      setValueMatchesText(`VALUE MATCHES: ${valueMatches}`);\n      setSuitMatchesText(`SUIT MATCHES: ${suitMatches}`);\n    }\n  }, [remainingCards]);\n\n  // Rendering the main layout with game components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"SNAP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(CardDisplay, {\n        currentCard: currentCard,\n        previousCard: previousCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), remainingCards > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: drawCard,\n          disabled: remainingCards === 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"remaining-cards\",\n          children: [\"Remaining cards: \", remainingCards]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: valueMatchesText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: suitMatchesText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hjsVDHzioR9biuGgQ5p2MZk9Vak=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CardDisplay","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","deckId","setDeckId","currentCard","setCurrentCard","previousCard","setPreviousCard","valueMatches","setValueMatches","valueMatchesText","setValueMatchesText","suitMatches","setSuitMatches","suitMatchesText","setSuitMatchesText","remainingCards","setRemainingCards","message","setMessage","fetchNewDeck","response","fetch","data","json","deck_id","drawCard","drawnCard","cards","remaining","suit","prevValue","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/brettdickenson1/Desktop/WORK/drivvn-tech-task/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CardDisplay from \"./components/CardDisplay\";\nimport Button from \"./components/Button\";\nimport \"./App.css\";\n\nfunction App() {\n  const [deckId, setDeckId] = useState(null);\n  const [currentCard, setCurrentCard] = useState(null);\n  const [previousCard, setPreviousCard] = useState(null);\n  const [valueMatches, setValueMatches] = useState(0);\n  const [valueMatchesText, setValueMatchesText] = useState(\"\");\n  const [suitMatches, setSuitMatches] = useState(0);\n  const [suitMatchesText, setSuitMatchesText] = useState(\"\");\n  const [remainingCards, setRemainingCards] = useState(52);\n  const [message, setMessage] = useState(\"\");\n\n  // Fetches a new deck of cards from the API on component mount\n  useEffect(() => {\n    fetchNewDeck();\n  }, []);\n\n  // Function to fetch a new deck of cards\n  const fetchNewDeck = async () => {\n    const response = await fetch(\n      \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"\n    );\n    const data = await response.json();\n    setDeckId(data.deck_id);\n  };\n\n  // Function to draw a card from the deck\n  const drawCard = async () => {\n    const response = await fetch(\n      `https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`\n    );\n    const data = await response.json();\n    const drawnCard = data.cards[0]; // Get the drawn card from the response data\n\n    // Update the previous card if there's a current card\n    if (currentCard) {\n      setPreviousCard(currentCard);\n    }\n\n    // Update the current card and remaining cards count\n    setCurrentCard(drawnCard);\n    setRemainingCards(data.remaining);\n\n    // Set current card to null if there are no remaining cards\n    if (data.remaining === 0) {\n      setCurrentCard(null);\n    }\n  };\n\n  // useEffect to check for card matching (suit or value)\n  useEffect(() => {\n    if (currentCard?.suit === previousCard?.suit && currentCard) {\n      setMessage(\"SNAP SUIT!\");\n      setSuitMatches((prevValue) => prevValue + 1);\n    } else if (currentCard?.value === previousCard?.value && currentCard) {\n      setMessage(\"SNAP VALUE!\");\n      setValueMatches((prevValue) => prevValue + 1);\n    } else {\n      setMessage(\"\");\n    }\n  }, [currentCard, previousCard?.suit, previousCard?.value]);\n\n  // useEffect to update match statistics when remaining cards reach 0\n  useEffect(() => {\n    if (remainingCards === 0) {\n      setValueMatchesText(`VALUE MATCHES: ${valueMatches}`);\n      setSuitMatchesText(`SUIT MATCHES: ${suitMatches}`);\n    }\n  }, [remainingCards]);\n\n  // Rendering the main layout with game components\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">SNAP</h1>\n      <div className=\"message-container\">\n        <p className=\"message\">{message}</p>\n      </div>\n      <div className=\"container\">\n        <CardDisplay currentCard={currentCard} previousCard={previousCard} />\n        {remainingCards > 0 ? (\n          <>\n            <Button onClick={drawCard} disabled={remainingCards === 0} />\n            <p className=\"remaining-cards\">Remaining cards: {remainingCards}</p>\n          </>\n        ) : null}\n        <p className=\"message\">{valueMatchesText}</p>\n        <p className=\"message\">{suitMatchesText}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}